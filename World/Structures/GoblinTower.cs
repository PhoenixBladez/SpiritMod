using SpiritMod.NPCs.Town;
using SpiritMod.Tiles.Ambient;
using SpiritMod.Tiles.Furniture;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace SpiritMod.World
{
	public class GoblinTower : AStructure
	{
		public override int OffsetX => -3;
		public override int OffsetY => -43;
		public override int[,] Tiles => new int[,] {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0},
			{0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0},
			{0,0,0,0,6,6,6,1,0,0,0,0,0,0,0,0,0,0,0,4,1,6,6,6,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,2,2,2,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,2,2,2,2,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,3,3,3,3,3,1,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,3,3,3,3,1,4,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
			{0,0,0,0,3,3,3,1,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,2,1,4,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,2,2,2,1,1,2,2,2,2,2,1,3,3,3,3,3,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,2,4,1,3,3,3,3,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,2,0,4,1,3,3,3,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,4,1,2,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,4,0,0,0,0,0,2,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,4,0,0,0,0,2,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,3,3,3,3,3,1,2,2,2,2,0,0,0,0,2,2,2,2,1,0,0,0,0,0,0,0},
			{0,0,0,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,4,0,2,1,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,4,0,0,1,4,0,0,0,0,0,0,0,0,0,0,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
			{0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
			{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
			{0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
			{0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0}
		};
		public override int[,] Slopes => new int[,] {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
			{0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
		};
		public override int[,] Walls => new int[,] {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,1,1,8,8,1,1,0,0,8,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,1,8,8,8,8,8,8,8,8,8,0,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,1,1,1,8,8,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,1,1,1,8,8,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,8,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,1,1,8,8,8,8,8,0,0,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,1,1,8,8,8,8,8,0,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,0,8,1,8,8,8,8,2,2,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,1,8,0,8,0,2,2,8,8,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,1,8,8,8,8,8,8,8,8,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,1,1,0,0,0,0,0,0},
			{0,0,0,5,5,5,5,5,0,8,8,8,8,8,8,0,0,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,5,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,5,0,8,2,2,8,8,8,1,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,8,2,2,8,8,8,1,1,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,0,0,8,8,8,1,8,8,0,5,5,5,5,5,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,0,0,8,8,8,1,8,8,0,5,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,0,8,8,8,1,8,8,0,5,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,8,8,8,8,8,2,2,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,8,8,8,8,8,2,2,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,1,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,5,5,5,5,5,0,8,2,2,8,8,8,8,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,0,2,8,2,8,8,8,8,1,8,8,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,1,1,8,8,8,8,0,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,1,1,8,8,8,8,0,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,0,1,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,1,8,8,8,8,8,8,8,1,1,8,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,8,8,8,1,1,1,8,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,0,8,8,8,8,8,8,8,8,8,8,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,8,8,8,8,8,8,8,8,8,8,8,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0},
		};
		public override int[,] Furniture => new int[,] {
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0},
			{0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0},
			{0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,5,5,8,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,5,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,6,0,6,0,0,5,5,5,0,0,0,0,0,5,5,8,0,0,0,0,0,0,0,0,0},
			{0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		};

		private static int shingleColor;
		public override bool Generate()
		{
			shingleColor = WorldGen.genRand.NextBool() ? TileID.RedDynastyShingles : TileID.BlueDynastyShingles;
			bool placed = false;
			int attempts = 0;
			while (!placed && attempts++ < 100000) {
				// Select a place in the first 6th of the world, avoiding the oceans
				int towerX = WorldGen.genRand.Next(300, Main.maxTilesX / 6); // from 50 since there's a unaccessible area at the world's borders
																			 // 50% of choosing the last 6th of the world
																			 // Choose which side of the world to be on randomly
				if (WorldGen.genRand.NextBool()) {
					towerX = Main.maxTilesX - towerX;
				}

				//Start at 200 tiles above the surface instead of 0, to exclude floating islands
				int towerY = (int)Main.worldSurface - 200;

				// We go down until we hit a solid tile or go under the world's surface
				while (!WorldGen.SolidTile(towerX, towerY) && towerY <= Main.worldSurface) {
					towerY++;
				}

				// If we went under the world's surface, try again
				if (towerY > Main.worldSurface) {
					continue;
				}
				Tile tile = Main.tile[towerX, towerY];
				// If the type of the tile we are placing the tower on doesn't match what we want, try again
				if (!(tile.TileType == TileID.Dirt
					|| tile.TileType == TileID.Grass
					|| tile.TileType == TileID.Stone
					|| tile.TileType == TileID.Mud
					|| tile.TileType == TileID.CrimsonGrass
					|| tile.TileType == TileID.CorruptGrass
					|| tile.TileType == TileID.JungleGrass
					|| tile.TileType == TileID.Sand
					|| tile.TileType == TileID.Crimsand
					|| tile.TileType == TileID.Ebonsand)) {
					continue;
				}

				// Don't place the tower if the area isn't flat
				if (!MyWorld.CheckFlat(towerX, towerY, Tiles.GetLength(1), 3))
					continue;

				// place the tower
				Place(towerX, towerY);
				// extend the base a bit
				for (int i = towerX - 2; i < towerX + Tiles.GetLength(1) - 4; i++) {
					for (int k = towerY + 3; k < towerY + 12; k++) {
						WorldGen.PlaceTile(i, k, TileID.StoneSlab, mute: true, forced: true);
						WorldGen.SlopeTile(i, k);
					}
				}
				// place the Rogue
				int num = NPC.NewNPC((towerX + 12) * 16, (towerY - 24) * 16, ModContent.NPCType<BoundGambler>(), 0, 0f, 0f, 0f, 0f, 255);
				Main.npc[num].homeTileX = -1;
				Main.npc[num].homeTileY = -1;
				Main.npc[num].direction = 1;
				Main.npc[num].homeless = true;
				placed = true;
			}
			if (!placed) SpiritMod.Instance.Logger.Error("Worldgen: FAILED to place Goblin Tower, ground not flat enough?");
			return placed;
		}

		protected override TileData TileMap(int tile, int x, int y)
		{
			switch (tile) {
				case 1:
					return new TileData(TileID.StoneSlab);
				case 2:
					return new TileData(TileID.Platforms);
				case 3:
					return new TileData(TileID.WoodBlock);
				case 4:
					return new TileData(TileID.WoodenBeam);
				case 6:
					return new TileData(shingleColor);
			}
			return null;
		}

		protected override TileData FurnitureMap(int tile, int x, int y)
		{
			switch (tile) {
				case 1:
					return new TileData(TileID.Pots);
				case 2:
					return new ObjectData(ModContent.TileType<GoblinStatueTile>());
				case 4:
					return new ObjectData(ModContent.TileType<ShadowflameStone>());
				case 5:
					return new ObjectData(TileID.Books, style: Main.rand.Next(5));
				case 6:
					return new ObjectData(TileID.FishingCrate);
				case 7:
					return new ChestData((ushort)ModContent.TileType<GoblinChest>());
				case 8:
					return new ObjectData(TileID.Bottles);
				case 9:
					return new ObjectData(ModContent.TileType<GoblinStandardTile>());
			}
			return null;
		}

		protected override WallData WallMap(int wall, int x, int y)
		{
			switch (wall) {
				case 1:
					return new WallData(WallID.GrassUnsafe);
				case 2:
					return new WallData(WallID.ArcaneRunes);
				case 5:
					return new WallData(WallID.WoodenFence);
				case 8:
					return new WallData(WallID.StoneSlab);
			}
			return new WallData(-1);
		}
	}
}